/*
 * generated by Xtext 2.12.0
 */
package org.xtext.svg.path.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SvgPathGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.Path");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPathPathValueParserRuleCall_0_0 = (RuleCall)cPathAssignment_0.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathPathValueParserRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		
		//Path:
		//	path+=PathValue path+=PathValue*;
		@Override public ParserRule getRule() { return rule; }
		
		//path+=PathValue path+=PathValue*
		public Group getGroup() { return cGroup; }
		
		//path+=PathValue
		public Assignment getPathAssignment_0() { return cPathAssignment_0; }
		
		//PathValue
		public RuleCall getPathPathValueParserRuleCall_0_0() { return cPathPathValueParserRuleCall_0_0; }
		
		//path+=PathValue*
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }
		
		//PathValue
		public RuleCall getPathPathValueParserRuleCall_1_0() { return cPathPathValueParserRuleCall_1_0; }
	}
	public class PathValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.PathValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbsoluteMoveToParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelativeMoveToParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAbsoluteLineToParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRelativeLineToParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAbsoluteHorizontalLineToParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRelativeHorizontalLineToParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cAbsoluteVerticalLineToParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cRelativeVerticalLineToParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cAbsoluteQuadraticCurveToParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cRelativeQuadraticCurveToParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cAbsoluteCubicCurveToParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cRelativeCubicCurveToParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cAbsoluteSmoothQuadraticCurveToParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cRelativeSmoothQuadraticCurveToParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cAbsoluteSmoothCubicCurveToParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		private final RuleCall cRelativeSmoothCubicCurveToParserRuleCall_15 = (RuleCall)cAlternatives.eContents().get(15);
		private final RuleCall cClosePathParserRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		//PathValue:
		//	AbsoluteMoveTo | RelativeMoveTo | AbsoluteLineTo | RelativeLineTo | AbsoluteHorizontalLineTo |
		//	RelativeHorizontalLineTo | AbsoluteVerticalLineTo | RelativeVerticalLineTo | AbsoluteQuadraticCurveTo |
		//	RelativeQuadraticCurveTo | AbsoluteCubicCurveTo | RelativeCubicCurveTo | AbsoluteSmoothQuadraticCurveTo |
		//	RelativeSmoothQuadraticCurveTo | AbsoluteSmoothCubicCurveTo | RelativeSmoothCubicCurveTo | ClosePath;
		@Override public ParserRule getRule() { return rule; }
		
		//AbsoluteMoveTo | RelativeMoveTo | AbsoluteLineTo | RelativeLineTo | AbsoluteHorizontalLineTo | RelativeHorizontalLineTo
		//| AbsoluteVerticalLineTo | RelativeVerticalLineTo | AbsoluteQuadraticCurveTo | RelativeQuadraticCurveTo |
		//AbsoluteCubicCurveTo | RelativeCubicCurveTo | AbsoluteSmoothQuadraticCurveTo | RelativeSmoothQuadraticCurveTo |
		//AbsoluteSmoothCubicCurveTo | RelativeSmoothCubicCurveTo | ClosePath
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AbsoluteMoveTo
		public RuleCall getAbsoluteMoveToParserRuleCall_0() { return cAbsoluteMoveToParserRuleCall_0; }
		
		//RelativeMoveTo
		public RuleCall getRelativeMoveToParserRuleCall_1() { return cRelativeMoveToParserRuleCall_1; }
		
		//AbsoluteLineTo
		public RuleCall getAbsoluteLineToParserRuleCall_2() { return cAbsoluteLineToParserRuleCall_2; }
		
		//RelativeLineTo
		public RuleCall getRelativeLineToParserRuleCall_3() { return cRelativeLineToParserRuleCall_3; }
		
		//AbsoluteHorizontalLineTo
		public RuleCall getAbsoluteHorizontalLineToParserRuleCall_4() { return cAbsoluteHorizontalLineToParserRuleCall_4; }
		
		//RelativeHorizontalLineTo
		public RuleCall getRelativeHorizontalLineToParserRuleCall_5() { return cRelativeHorizontalLineToParserRuleCall_5; }
		
		//AbsoluteVerticalLineTo
		public RuleCall getAbsoluteVerticalLineToParserRuleCall_6() { return cAbsoluteVerticalLineToParserRuleCall_6; }
		
		//RelativeVerticalLineTo
		public RuleCall getRelativeVerticalLineToParserRuleCall_7() { return cRelativeVerticalLineToParserRuleCall_7; }
		
		//AbsoluteQuadraticCurveTo
		public RuleCall getAbsoluteQuadraticCurveToParserRuleCall_8() { return cAbsoluteQuadraticCurveToParserRuleCall_8; }
		
		//RelativeQuadraticCurveTo
		public RuleCall getRelativeQuadraticCurveToParserRuleCall_9() { return cRelativeQuadraticCurveToParserRuleCall_9; }
		
		//AbsoluteCubicCurveTo
		public RuleCall getAbsoluteCubicCurveToParserRuleCall_10() { return cAbsoluteCubicCurveToParserRuleCall_10; }
		
		//RelativeCubicCurveTo
		public RuleCall getRelativeCubicCurveToParserRuleCall_11() { return cRelativeCubicCurveToParserRuleCall_11; }
		
		//AbsoluteSmoothQuadraticCurveTo
		public RuleCall getAbsoluteSmoothQuadraticCurveToParserRuleCall_12() { return cAbsoluteSmoothQuadraticCurveToParserRuleCall_12; }
		
		//RelativeSmoothQuadraticCurveTo
		public RuleCall getRelativeSmoothQuadraticCurveToParserRuleCall_13() { return cRelativeSmoothQuadraticCurveToParserRuleCall_13; }
		
		//AbsoluteSmoothCubicCurveTo
		public RuleCall getAbsoluteSmoothCubicCurveToParserRuleCall_14() { return cAbsoluteSmoothCubicCurveToParserRuleCall_14; }
		
		//RelativeSmoothCubicCurveTo
		public RuleCall getRelativeSmoothCubicCurveToParserRuleCall_15() { return cRelativeSmoothCubicCurveToParserRuleCall_15; }
		
		//ClosePath
		public RuleCall getClosePathParserRuleCall_16() { return cClosePathParserRuleCall_16; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1_0 = (Alternatives)cGroup_0_1.eContents().get(0);
		private final Keyword cEKeyword_0_1_0_0 = (Keyword)cAlternatives_0_1_0.eContents().get(0);
		private final Keyword cEKeyword_0_1_0_1 = (Keyword)cAlternatives_0_1_0.eContents().get(1);
		private final RuleCall cIntegerParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Alternatives cAlternatives_1_4_0 = (Alternatives)cGroup_1_4.eContents().get(0);
		private final Keyword cEKeyword_1_4_0_0 = (Keyword)cAlternatives_1_4_0.eContents().get(0);
		private final Keyword cEKeyword_1_4_0_1 = (Keyword)cAlternatives_1_4_0.eContents().get(1);
		private final RuleCall cIntegerParserRuleCall_1_4_1 = (RuleCall)cGroup_1_4.eContents().get(1);
		
		//Number ecore::EBigDecimal:
		//	Integer (('E' | 'e') Integer)? | ('+' | '-')? INT? '.' INT (('E' | 'e') Integer)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Integer (('E' | 'e') Integer)? | ('+' | '-')? INT? '.' INT (('E' | 'e') Integer)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Integer (('E' | 'e') Integer)?
		public Group getGroup_0() { return cGroup_0; }
		
		//Integer
		public RuleCall getIntegerParserRuleCall_0_0() { return cIntegerParserRuleCall_0_0; }
		
		//(('E' | 'e') Integer)?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'E' | 'e'
		public Alternatives getAlternatives_0_1_0() { return cAlternatives_0_1_0; }
		
		//'E'
		public Keyword getEKeyword_0_1_0_0() { return cEKeyword_0_1_0_0; }
		
		//'e'
		public Keyword getEKeyword_0_1_0_1() { return cEKeyword_0_1_0_1; }
		
		//Integer
		public RuleCall getIntegerParserRuleCall_0_1_1() { return cIntegerParserRuleCall_0_1_1; }
		
		//('+' | '-')? INT? '.' INT (('E' | 'e') Integer)?
		public Group getGroup_1() { return cGroup_1; }
		
		//('+' | '-')?
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0() { return cPlusSignKeyword_1_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1() { return cHyphenMinusKeyword_1_0_1; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2() { return cFullStopKeyword_1_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_3() { return cINTTerminalRuleCall_1_3; }
		
		//(('E' | 'e') Integer)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//'E' | 'e'
		public Alternatives getAlternatives_1_4_0() { return cAlternatives_1_4_0; }
		
		//'E'
		public Keyword getEKeyword_1_4_0_0() { return cEKeyword_1_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_1_4_0_1() { return cEKeyword_1_4_0_1; }
		
		//Integer
		public RuleCall getIntegerParserRuleCall_1_4_1() { return cIntegerParserRuleCall_1_4_1; }
	}
	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.Integer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Integer ecore::EBigInteger:
		//	('+' | '-')? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//('+' | '-')? INT
		public Group getGroup() { return cGroup; }
		
		//('+' | '-')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class AbsoluteMoveToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.AbsoluteMoveTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXNumberParserRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYNumberParserRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		
		//AbsoluteMoveTo:
		//	'M' x=Number ','? y=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//'M' x=Number ','? y=Number
		public Group getGroup() { return cGroup; }
		
		//'M'
		public Keyword getMKeyword_0() { return cMKeyword_0; }
		
		//x=Number
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//Number
		public RuleCall getXNumberParserRuleCall_1_0() { return cXNumberParserRuleCall_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//y=Number
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//Number
		public RuleCall getYNumberParserRuleCall_3_0() { return cYNumberParserRuleCall_3_0; }
	}
	public class RelativeMoveToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.RelativeMoveTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDxNumberParserRuleCall_1_0 = (RuleCall)cDxAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDyNumberParserRuleCall_3_0 = (RuleCall)cDyAssignment_3.eContents().get(0);
		
		//RelativeMoveTo:
		//	'm' dx=Number ','? dy=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//'m' dx=Number ','? dy=Number
		public Group getGroup() { return cGroup; }
		
		//'m'
		public Keyword getMKeyword_0() { return cMKeyword_0; }
		
		//dx=Number
		public Assignment getDxAssignment_1() { return cDxAssignment_1; }
		
		//Number
		public RuleCall getDxNumberParserRuleCall_1_0() { return cDxNumberParserRuleCall_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//dy=Number
		public Assignment getDyAssignment_3() { return cDyAssignment_3; }
		
		//Number
		public RuleCall getDyNumberParserRuleCall_3_0() { return cDyNumberParserRuleCall_3_0; }
	}
	public class AbsoluteLineToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.AbsoluteLineTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXNumberParserRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYNumberParserRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		
		//AbsoluteLineTo:
		//	'L' x=Number ','? y=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//'L' x=Number ','? y=Number
		public Group getGroup() { return cGroup; }
		
		//'L'
		public Keyword getLKeyword_0() { return cLKeyword_0; }
		
		//x=Number
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//Number
		public RuleCall getXNumberParserRuleCall_1_0() { return cXNumberParserRuleCall_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//y=Number
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//Number
		public RuleCall getYNumberParserRuleCall_3_0() { return cYNumberParserRuleCall_3_0; }
	}
	public class RelativeLineToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.RelativeLineTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDxNumberParserRuleCall_1_0 = (RuleCall)cDxAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDyNumberParserRuleCall_3_0 = (RuleCall)cDyAssignment_3.eContents().get(0);
		
		//RelativeLineTo:
		//	'l' dx=Number ','? dy=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//'l' dx=Number ','? dy=Number
		public Group getGroup() { return cGroup; }
		
		//'l'
		public Keyword getLKeyword_0() { return cLKeyword_0; }
		
		//dx=Number
		public Assignment getDxAssignment_1() { return cDxAssignment_1; }
		
		//Number
		public RuleCall getDxNumberParserRuleCall_1_0() { return cDxNumberParserRuleCall_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//dy=Number
		public Assignment getDyAssignment_3() { return cDyAssignment_3; }
		
		//Number
		public RuleCall getDyNumberParserRuleCall_3_0() { return cDyNumberParserRuleCall_3_0; }
	}
	public class AbsoluteHorizontalLineToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.AbsoluteHorizontalLineTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXNumberParserRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		
		//AbsoluteHorizontalLineTo:
		//	'H' x=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//'H' x=Number
		public Group getGroup() { return cGroup; }
		
		//'H'
		public Keyword getHKeyword_0() { return cHKeyword_0; }
		
		//x=Number
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//Number
		public RuleCall getXNumberParserRuleCall_1_0() { return cXNumberParserRuleCall_1_0; }
	}
	public class RelativeHorizontalLineToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.RelativeHorizontalLineTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDxNumberParserRuleCall_1_0 = (RuleCall)cDxAssignment_1.eContents().get(0);
		
		//RelativeHorizontalLineTo:
		//	'h' dx=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//'h' dx=Number
		public Group getGroup() { return cGroup; }
		
		//'h'
		public Keyword getHKeyword_0() { return cHKeyword_0; }
		
		//dx=Number
		public Assignment getDxAssignment_1() { return cDxAssignment_1; }
		
		//Number
		public RuleCall getDxNumberParserRuleCall_1_0() { return cDxNumberParserRuleCall_1_0; }
	}
	public class AbsoluteVerticalLineToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.AbsoluteVerticalLineTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cYAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cYNumberParserRuleCall_1_0 = (RuleCall)cYAssignment_1.eContents().get(0);
		
		//AbsoluteVerticalLineTo:
		//	'V' y=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//'V' y=Number
		public Group getGroup() { return cGroup; }
		
		//'V'
		public Keyword getVKeyword_0() { return cVKeyword_0; }
		
		//y=Number
		public Assignment getYAssignment_1() { return cYAssignment_1; }
		
		//Number
		public RuleCall getYNumberParserRuleCall_1_0() { return cYNumberParserRuleCall_1_0; }
	}
	public class RelativeVerticalLineToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.RelativeVerticalLineTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDyNumberParserRuleCall_1_0 = (RuleCall)cDyAssignment_1.eContents().get(0);
		
		//RelativeVerticalLineTo:
		//	'v' dy=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//'v' dy=Number
		public Group getGroup() { return cGroup; }
		
		//'v'
		public Keyword getVKeyword_0() { return cVKeyword_0; }
		
		//dy=Number
		public Assignment getDyAssignment_1() { return cDyAssignment_1; }
		
		//Number
		public RuleCall getDyNumberParserRuleCall_1_0() { return cDyNumberParserRuleCall_1_0; }
	}
	public class AbsoluteQuadraticCurveToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.AbsoluteQuadraticCurveTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCxNumberParserRuleCall_1_0 = (RuleCall)cCxAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCyNumberParserRuleCall_3_0 = (RuleCall)cCyAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cXAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cXNumberParserRuleCall_5_0 = (RuleCall)cXAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cYAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cYNumberParserRuleCall_7_0 = (RuleCall)cYAssignment_7.eContents().get(0);
		
		//AbsoluteQuadraticCurveTo:
		//	'Q' cx=Number ','? cy=Number ','? x=Number ','? y=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//'Q' cx=Number ','? cy=Number ','? x=Number ','? y=Number
		public Group getGroup() { return cGroup; }
		
		//'Q'
		public Keyword getQKeyword_0() { return cQKeyword_0; }
		
		//cx=Number
		public Assignment getCxAssignment_1() { return cCxAssignment_1; }
		
		//Number
		public RuleCall getCxNumberParserRuleCall_1_0() { return cCxNumberParserRuleCall_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//cy=Number
		public Assignment getCyAssignment_3() { return cCyAssignment_3; }
		
		//Number
		public RuleCall getCyNumberParserRuleCall_3_0() { return cCyNumberParserRuleCall_3_0; }
		
		//','?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//x=Number
		public Assignment getXAssignment_5() { return cXAssignment_5; }
		
		//Number
		public RuleCall getXNumberParserRuleCall_5_0() { return cXNumberParserRuleCall_5_0; }
		
		//','?
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//y=Number
		public Assignment getYAssignment_7() { return cYAssignment_7; }
		
		//Number
		public RuleCall getYNumberParserRuleCall_7_0() { return cYNumberParserRuleCall_7_0; }
	}
	public class RelativeQuadraticCurveToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.RelativeQuadraticCurveTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDcxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDcxNumberParserRuleCall_1_0 = (RuleCall)cDcxAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDcyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDcyNumberParserRuleCall_3_0 = (RuleCall)cDcyAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDxAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDxNumberParserRuleCall_5_0 = (RuleCall)cDxAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDyNumberParserRuleCall_7_0 = (RuleCall)cDyAssignment_7.eContents().get(0);
		
		//RelativeQuadraticCurveTo:
		//	'q' dcx=Number ','? dcy=Number ','? dx=Number ','? dy=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//'q' dcx=Number ','? dcy=Number ','? dx=Number ','? dy=Number
		public Group getGroup() { return cGroup; }
		
		//'q'
		public Keyword getQKeyword_0() { return cQKeyword_0; }
		
		//dcx=Number
		public Assignment getDcxAssignment_1() { return cDcxAssignment_1; }
		
		//Number
		public RuleCall getDcxNumberParserRuleCall_1_0() { return cDcxNumberParserRuleCall_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//dcy=Number
		public Assignment getDcyAssignment_3() { return cDcyAssignment_3; }
		
		//Number
		public RuleCall getDcyNumberParserRuleCall_3_0() { return cDcyNumberParserRuleCall_3_0; }
		
		//','?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//dx=Number
		public Assignment getDxAssignment_5() { return cDxAssignment_5; }
		
		//Number
		public RuleCall getDxNumberParserRuleCall_5_0() { return cDxNumberParserRuleCall_5_0; }
		
		//','?
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//dy=Number
		public Assignment getDyAssignment_7() { return cDyAssignment_7; }
		
		//Number
		public RuleCall getDyNumberParserRuleCall_7_0() { return cDyNumberParserRuleCall_7_0; }
	}
	public class AbsoluteCubicCurveToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.AbsoluteCubicCurveTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cC1xAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cC1xNumberParserRuleCall_1_0 = (RuleCall)cC1xAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cC1yAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cC1yNumberParserRuleCall_3_0 = (RuleCall)cC1yAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cC2xAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cC2xNumberParserRuleCall_5_0 = (RuleCall)cC2xAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cC2yAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cC2yNumberParserRuleCall_7_0 = (RuleCall)cC2yAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cXAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cXNumberParserRuleCall_9_0 = (RuleCall)cXAssignment_9.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cYAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cYNumberParserRuleCall_11_0 = (RuleCall)cYAssignment_11.eContents().get(0);
		
		//AbsoluteCubicCurveTo:
		//	'C' c1x=Number ','? c1y=Number ','? c2x=Number ','? c2y=Number ','? x=Number ','? y=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//'C' c1x=Number ','? c1y=Number ','? c2x=Number ','? c2y=Number ','? x=Number ','? y=Number
		public Group getGroup() { return cGroup; }
		
		//'C'
		public Keyword getCKeyword_0() { return cCKeyword_0; }
		
		//c1x=Number
		public Assignment getC1xAssignment_1() { return cC1xAssignment_1; }
		
		//Number
		public RuleCall getC1xNumberParserRuleCall_1_0() { return cC1xNumberParserRuleCall_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//c1y=Number
		public Assignment getC1yAssignment_3() { return cC1yAssignment_3; }
		
		//Number
		public RuleCall getC1yNumberParserRuleCall_3_0() { return cC1yNumberParserRuleCall_3_0; }
		
		//','?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//c2x=Number
		public Assignment getC2xAssignment_5() { return cC2xAssignment_5; }
		
		//Number
		public RuleCall getC2xNumberParserRuleCall_5_0() { return cC2xNumberParserRuleCall_5_0; }
		
		//','?
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//c2y=Number
		public Assignment getC2yAssignment_7() { return cC2yAssignment_7; }
		
		//Number
		public RuleCall getC2yNumberParserRuleCall_7_0() { return cC2yNumberParserRuleCall_7_0; }
		
		//','?
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//x=Number
		public Assignment getXAssignment_9() { return cXAssignment_9; }
		
		//Number
		public RuleCall getXNumberParserRuleCall_9_0() { return cXNumberParserRuleCall_9_0; }
		
		//','?
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }
		
		//y=Number
		public Assignment getYAssignment_11() { return cYAssignment_11; }
		
		//Number
		public RuleCall getYNumberParserRuleCall_11_0() { return cYNumberParserRuleCall_11_0; }
	}
	public class RelativeCubicCurveToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.RelativeCubicCurveTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDc1xAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDc1xNumberParserRuleCall_1_0 = (RuleCall)cDc1xAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDc1yAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDc1yNumberParserRuleCall_3_0 = (RuleCall)cDc1yAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDc2xAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDc2xNumberParserRuleCall_5_0 = (RuleCall)cDc2xAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDc2yAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDc2yNumberParserRuleCall_7_0 = (RuleCall)cDc2yAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cDxAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDxNumberParserRuleCall_9_0 = (RuleCall)cDxAssignment_9.eContents().get(0);
		private final Keyword cCommaKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cDyAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cDyNumberParserRuleCall_11_0 = (RuleCall)cDyAssignment_11.eContents().get(0);
		
		//RelativeCubicCurveTo:
		//	'c' dc1x=Number ','? dc1y=Number ','? dc2x=Number ','? dc2y=Number ','? dx=Number ','? dy=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//'c' dc1x=Number ','? dc1y=Number ','? dc2x=Number ','? dc2y=Number ','? dx=Number ','? dy=Number
		public Group getGroup() { return cGroup; }
		
		//'c'
		public Keyword getCKeyword_0() { return cCKeyword_0; }
		
		//dc1x=Number
		public Assignment getDc1xAssignment_1() { return cDc1xAssignment_1; }
		
		//Number
		public RuleCall getDc1xNumberParserRuleCall_1_0() { return cDc1xNumberParserRuleCall_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//dc1y=Number
		public Assignment getDc1yAssignment_3() { return cDc1yAssignment_3; }
		
		//Number
		public RuleCall getDc1yNumberParserRuleCall_3_0() { return cDc1yNumberParserRuleCall_3_0; }
		
		//','?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//dc2x=Number
		public Assignment getDc2xAssignment_5() { return cDc2xAssignment_5; }
		
		//Number
		public RuleCall getDc2xNumberParserRuleCall_5_0() { return cDc2xNumberParserRuleCall_5_0; }
		
		//','?
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//dc2y=Number
		public Assignment getDc2yAssignment_7() { return cDc2yAssignment_7; }
		
		//Number
		public RuleCall getDc2yNumberParserRuleCall_7_0() { return cDc2yNumberParserRuleCall_7_0; }
		
		//','?
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//dx=Number
		public Assignment getDxAssignment_9() { return cDxAssignment_9; }
		
		//Number
		public RuleCall getDxNumberParserRuleCall_9_0() { return cDxNumberParserRuleCall_9_0; }
		
		//','?
		public Keyword getCommaKeyword_10() { return cCommaKeyword_10; }
		
		//dy=Number
		public Assignment getDyAssignment_11() { return cDyAssignment_11; }
		
		//Number
		public RuleCall getDyNumberParserRuleCall_11_0() { return cDyNumberParserRuleCall_11_0; }
	}
	public class AbsoluteSmoothQuadraticCurveToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.AbsoluteSmoothQuadraticCurveTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXNumberParserRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYNumberParserRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		
		//AbsoluteSmoothQuadraticCurveTo:
		//	'T' x=Number ','? y=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//'T' x=Number ','? y=Number
		public Group getGroup() { return cGroup; }
		
		//'T'
		public Keyword getTKeyword_0() { return cTKeyword_0; }
		
		//x=Number
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//Number
		public RuleCall getXNumberParserRuleCall_1_0() { return cXNumberParserRuleCall_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//y=Number
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//Number
		public RuleCall getYNumberParserRuleCall_3_0() { return cYNumberParserRuleCall_3_0; }
	}
	public class RelativeSmoothQuadraticCurveToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.RelativeSmoothQuadraticCurveTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDxNumberParserRuleCall_1_0 = (RuleCall)cDxAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDyNumberParserRuleCall_3_0 = (RuleCall)cDyAssignment_3.eContents().get(0);
		
		//RelativeSmoothQuadraticCurveTo:
		//	't' dx=Number ','? dy=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//'t' dx=Number ','? dy=Number
		public Group getGroup() { return cGroup; }
		
		//'t'
		public Keyword getTKeyword_0() { return cTKeyword_0; }
		
		//dx=Number
		public Assignment getDxAssignment_1() { return cDxAssignment_1; }
		
		//Number
		public RuleCall getDxNumberParserRuleCall_1_0() { return cDxNumberParserRuleCall_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//dy=Number
		public Assignment getDyAssignment_3() { return cDyAssignment_3; }
		
		//Number
		public RuleCall getDyNumberParserRuleCall_3_0() { return cDyNumberParserRuleCall_3_0; }
	}
	public class AbsoluteSmoothCubicCurveToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.AbsoluteSmoothCubicCurveTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCxNumberParserRuleCall_1_0 = (RuleCall)cCxAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCyNumberParserRuleCall_3_0 = (RuleCall)cCyAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cXAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cXNumberParserRuleCall_5_0 = (RuleCall)cXAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cYAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cYNumberParserRuleCall_7_0 = (RuleCall)cYAssignment_7.eContents().get(0);
		
		//AbsoluteSmoothCubicCurveTo:
		//	'S' cx=Number ','? cy=Number ','? x=Number ','? y=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//'S' cx=Number ','? cy=Number ','? x=Number ','? y=Number
		public Group getGroup() { return cGroup; }
		
		//'S'
		public Keyword getSKeyword_0() { return cSKeyword_0; }
		
		//cx=Number
		public Assignment getCxAssignment_1() { return cCxAssignment_1; }
		
		//Number
		public RuleCall getCxNumberParserRuleCall_1_0() { return cCxNumberParserRuleCall_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//cy=Number
		public Assignment getCyAssignment_3() { return cCyAssignment_3; }
		
		//Number
		public RuleCall getCyNumberParserRuleCall_3_0() { return cCyNumberParserRuleCall_3_0; }
		
		//','?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//x=Number
		public Assignment getXAssignment_5() { return cXAssignment_5; }
		
		//Number
		public RuleCall getXNumberParserRuleCall_5_0() { return cXNumberParserRuleCall_5_0; }
		
		//','?
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//y=Number
		public Assignment getYAssignment_7() { return cYAssignment_7; }
		
		//Number
		public RuleCall getYNumberParserRuleCall_7_0() { return cYNumberParserRuleCall_7_0; }
	}
	public class RelativeSmoothCubicCurveToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.RelativeSmoothCubicCurveTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDcxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDcxNumberParserRuleCall_1_0 = (RuleCall)cDcxAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDcyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDcyNumberParserRuleCall_3_0 = (RuleCall)cDcyAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDxAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDxNumberParserRuleCall_5_0 = (RuleCall)cDxAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDyNumberParserRuleCall_7_0 = (RuleCall)cDyAssignment_7.eContents().get(0);
		
		//RelativeSmoothCubicCurveTo:
		//	's' dcx=Number ','? dcy=Number ','? dx=Number ','? dy=Number;
		@Override public ParserRule getRule() { return rule; }
		
		//'s' dcx=Number ','? dcy=Number ','? dx=Number ','? dy=Number
		public Group getGroup() { return cGroup; }
		
		//'s'
		public Keyword getSKeyword_0() { return cSKeyword_0; }
		
		//dcx=Number
		public Assignment getDcxAssignment_1() { return cDcxAssignment_1; }
		
		//Number
		public RuleCall getDcxNumberParserRuleCall_1_0() { return cDcxNumberParserRuleCall_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//dcy=Number
		public Assignment getDcyAssignment_3() { return cDcyAssignment_3; }
		
		//Number
		public RuleCall getDcyNumberParserRuleCall_3_0() { return cDcyNumberParserRuleCall_3_0; }
		
		//','?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//dx=Number
		public Assignment getDxAssignment_5() { return cDxAssignment_5; }
		
		//Number
		public RuleCall getDxNumberParserRuleCall_5_0() { return cDxNumberParserRuleCall_5_0; }
		
		//','?
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//dy=Number
		public Assignment getDyAssignment_7() { return cDyAssignment_7; }
		
		//Number
		public RuleCall getDyNumberParserRuleCall_7_0() { return cDyNumberParserRuleCall_7_0; }
	}
	public class ClosePathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.path.SvgPath.ClosePath");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cClosePathAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cZKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cZKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ClosePath:
		//	{ClosePath}
		//	'Z' | 'z';
		@Override public ParserRule getRule() { return rule; }
		
		//{ClosePath} 'Z' | 'z'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ClosePath} 'Z'
		public Group getGroup_0() { return cGroup_0; }
		
		//{ClosePath}
		public Action getClosePathAction_0_0() { return cClosePathAction_0_0; }
		
		//'Z'
		public Keyword getZKeyword_0_1() { return cZKeyword_0_1; }
		
		//'z'
		public Keyword getZKeyword_1() { return cZKeyword_1; }
	}
	
	
	private final PathElements pPath;
	private final PathValueElements pPathValue;
	private final NumberElements pNumber;
	private final IntegerElements pInteger;
	private final AbsoluteMoveToElements pAbsoluteMoveTo;
	private final RelativeMoveToElements pRelativeMoveTo;
	private final AbsoluteLineToElements pAbsoluteLineTo;
	private final RelativeLineToElements pRelativeLineTo;
	private final AbsoluteHorizontalLineToElements pAbsoluteHorizontalLineTo;
	private final RelativeHorizontalLineToElements pRelativeHorizontalLineTo;
	private final AbsoluteVerticalLineToElements pAbsoluteVerticalLineTo;
	private final RelativeVerticalLineToElements pRelativeVerticalLineTo;
	private final AbsoluteQuadraticCurveToElements pAbsoluteQuadraticCurveTo;
	private final RelativeQuadraticCurveToElements pRelativeQuadraticCurveTo;
	private final AbsoluteCubicCurveToElements pAbsoluteCubicCurveTo;
	private final RelativeCubicCurveToElements pRelativeCubicCurveTo;
	private final AbsoluteSmoothQuadraticCurveToElements pAbsoluteSmoothQuadraticCurveTo;
	private final RelativeSmoothQuadraticCurveToElements pRelativeSmoothQuadraticCurveTo;
	private final AbsoluteSmoothCubicCurveToElements pAbsoluteSmoothCubicCurveTo;
	private final RelativeSmoothCubicCurveToElements pRelativeSmoothCubicCurveTo;
	private final ClosePathElements pClosePath;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SvgPathGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPath = new PathElements();
		this.pPathValue = new PathValueElements();
		this.pNumber = new NumberElements();
		this.pInteger = new IntegerElements();
		this.pAbsoluteMoveTo = new AbsoluteMoveToElements();
		this.pRelativeMoveTo = new RelativeMoveToElements();
		this.pAbsoluteLineTo = new AbsoluteLineToElements();
		this.pRelativeLineTo = new RelativeLineToElements();
		this.pAbsoluteHorizontalLineTo = new AbsoluteHorizontalLineToElements();
		this.pRelativeHorizontalLineTo = new RelativeHorizontalLineToElements();
		this.pAbsoluteVerticalLineTo = new AbsoluteVerticalLineToElements();
		this.pRelativeVerticalLineTo = new RelativeVerticalLineToElements();
		this.pAbsoluteQuadraticCurveTo = new AbsoluteQuadraticCurveToElements();
		this.pRelativeQuadraticCurveTo = new RelativeQuadraticCurveToElements();
		this.pAbsoluteCubicCurveTo = new AbsoluteCubicCurveToElements();
		this.pRelativeCubicCurveTo = new RelativeCubicCurveToElements();
		this.pAbsoluteSmoothQuadraticCurveTo = new AbsoluteSmoothQuadraticCurveToElements();
		this.pRelativeSmoothQuadraticCurveTo = new RelativeSmoothQuadraticCurveToElements();
		this.pAbsoluteSmoothCubicCurveTo = new AbsoluteSmoothCubicCurveToElements();
		this.pRelativeSmoothCubicCurveTo = new RelativeSmoothCubicCurveToElements();
		this.pClosePath = new ClosePathElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.svg.path.SvgPath".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Path:
	//	path+=PathValue path+=PathValue*;
	public PathElements getPathAccess() {
		return pPath;
	}
	
	public ParserRule getPathRule() {
		return getPathAccess().getRule();
	}
	
	//PathValue:
	//	AbsoluteMoveTo | RelativeMoveTo | AbsoluteLineTo | RelativeLineTo | AbsoluteHorizontalLineTo |
	//	RelativeHorizontalLineTo | AbsoluteVerticalLineTo | RelativeVerticalLineTo | AbsoluteQuadraticCurveTo |
	//	RelativeQuadraticCurveTo | AbsoluteCubicCurveTo | RelativeCubicCurveTo | AbsoluteSmoothQuadraticCurveTo |
	//	RelativeSmoothQuadraticCurveTo | AbsoluteSmoothCubicCurveTo | RelativeSmoothCubicCurveTo | ClosePath;
	public PathValueElements getPathValueAccess() {
		return pPathValue;
	}
	
	public ParserRule getPathValueRule() {
		return getPathValueAccess().getRule();
	}
	
	//Number ecore::EBigDecimal:
	//	Integer (('E' | 'e') Integer)? | ('+' | '-')? INT? '.' INT (('E' | 'e') Integer)?;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Integer ecore::EBigInteger:
	//	('+' | '-')? INT;
	public IntegerElements getIntegerAccess() {
		return pInteger;
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//AbsoluteMoveTo:
	//	'M' x=Number ','? y=Number;
	public AbsoluteMoveToElements getAbsoluteMoveToAccess() {
		return pAbsoluteMoveTo;
	}
	
	public ParserRule getAbsoluteMoveToRule() {
		return getAbsoluteMoveToAccess().getRule();
	}
	
	//RelativeMoveTo:
	//	'm' dx=Number ','? dy=Number;
	public RelativeMoveToElements getRelativeMoveToAccess() {
		return pRelativeMoveTo;
	}
	
	public ParserRule getRelativeMoveToRule() {
		return getRelativeMoveToAccess().getRule();
	}
	
	//AbsoluteLineTo:
	//	'L' x=Number ','? y=Number;
	public AbsoluteLineToElements getAbsoluteLineToAccess() {
		return pAbsoluteLineTo;
	}
	
	public ParserRule getAbsoluteLineToRule() {
		return getAbsoluteLineToAccess().getRule();
	}
	
	//RelativeLineTo:
	//	'l' dx=Number ','? dy=Number;
	public RelativeLineToElements getRelativeLineToAccess() {
		return pRelativeLineTo;
	}
	
	public ParserRule getRelativeLineToRule() {
		return getRelativeLineToAccess().getRule();
	}
	
	//AbsoluteHorizontalLineTo:
	//	'H' x=Number;
	public AbsoluteHorizontalLineToElements getAbsoluteHorizontalLineToAccess() {
		return pAbsoluteHorizontalLineTo;
	}
	
	public ParserRule getAbsoluteHorizontalLineToRule() {
		return getAbsoluteHorizontalLineToAccess().getRule();
	}
	
	//RelativeHorizontalLineTo:
	//	'h' dx=Number;
	public RelativeHorizontalLineToElements getRelativeHorizontalLineToAccess() {
		return pRelativeHorizontalLineTo;
	}
	
	public ParserRule getRelativeHorizontalLineToRule() {
		return getRelativeHorizontalLineToAccess().getRule();
	}
	
	//AbsoluteVerticalLineTo:
	//	'V' y=Number;
	public AbsoluteVerticalLineToElements getAbsoluteVerticalLineToAccess() {
		return pAbsoluteVerticalLineTo;
	}
	
	public ParserRule getAbsoluteVerticalLineToRule() {
		return getAbsoluteVerticalLineToAccess().getRule();
	}
	
	//RelativeVerticalLineTo:
	//	'v' dy=Number;
	public RelativeVerticalLineToElements getRelativeVerticalLineToAccess() {
		return pRelativeVerticalLineTo;
	}
	
	public ParserRule getRelativeVerticalLineToRule() {
		return getRelativeVerticalLineToAccess().getRule();
	}
	
	//AbsoluteQuadraticCurveTo:
	//	'Q' cx=Number ','? cy=Number ','? x=Number ','? y=Number;
	public AbsoluteQuadraticCurveToElements getAbsoluteQuadraticCurveToAccess() {
		return pAbsoluteQuadraticCurveTo;
	}
	
	public ParserRule getAbsoluteQuadraticCurveToRule() {
		return getAbsoluteQuadraticCurveToAccess().getRule();
	}
	
	//RelativeQuadraticCurveTo:
	//	'q' dcx=Number ','? dcy=Number ','? dx=Number ','? dy=Number;
	public RelativeQuadraticCurveToElements getRelativeQuadraticCurveToAccess() {
		return pRelativeQuadraticCurveTo;
	}
	
	public ParserRule getRelativeQuadraticCurveToRule() {
		return getRelativeQuadraticCurveToAccess().getRule();
	}
	
	//AbsoluteCubicCurveTo:
	//	'C' c1x=Number ','? c1y=Number ','? c2x=Number ','? c2y=Number ','? x=Number ','? y=Number;
	public AbsoluteCubicCurveToElements getAbsoluteCubicCurveToAccess() {
		return pAbsoluteCubicCurveTo;
	}
	
	public ParserRule getAbsoluteCubicCurveToRule() {
		return getAbsoluteCubicCurveToAccess().getRule();
	}
	
	//RelativeCubicCurveTo:
	//	'c' dc1x=Number ','? dc1y=Number ','? dc2x=Number ','? dc2y=Number ','? dx=Number ','? dy=Number;
	public RelativeCubicCurveToElements getRelativeCubicCurveToAccess() {
		return pRelativeCubicCurveTo;
	}
	
	public ParserRule getRelativeCubicCurveToRule() {
		return getRelativeCubicCurveToAccess().getRule();
	}
	
	//AbsoluteSmoothQuadraticCurveTo:
	//	'T' x=Number ','? y=Number;
	public AbsoluteSmoothQuadraticCurveToElements getAbsoluteSmoothQuadraticCurveToAccess() {
		return pAbsoluteSmoothQuadraticCurveTo;
	}
	
	public ParserRule getAbsoluteSmoothQuadraticCurveToRule() {
		return getAbsoluteSmoothQuadraticCurveToAccess().getRule();
	}
	
	//RelativeSmoothQuadraticCurveTo:
	//	't' dx=Number ','? dy=Number;
	public RelativeSmoothQuadraticCurveToElements getRelativeSmoothQuadraticCurveToAccess() {
		return pRelativeSmoothQuadraticCurveTo;
	}
	
	public ParserRule getRelativeSmoothQuadraticCurveToRule() {
		return getRelativeSmoothQuadraticCurveToAccess().getRule();
	}
	
	//AbsoluteSmoothCubicCurveTo:
	//	'S' cx=Number ','? cy=Number ','? x=Number ','? y=Number;
	public AbsoluteSmoothCubicCurveToElements getAbsoluteSmoothCubicCurveToAccess() {
		return pAbsoluteSmoothCubicCurveTo;
	}
	
	public ParserRule getAbsoluteSmoothCubicCurveToRule() {
		return getAbsoluteSmoothCubicCurveToAccess().getRule();
	}
	
	//RelativeSmoothCubicCurveTo:
	//	's' dcx=Number ','? dcy=Number ','? dx=Number ','? dy=Number;
	public RelativeSmoothCubicCurveToElements getRelativeSmoothCubicCurveToAccess() {
		return pRelativeSmoothCubicCurveTo;
	}
	
	public ParserRule getRelativeSmoothCubicCurveToRule() {
		return getRelativeSmoothCubicCurveToAccess().getRule();
	}
	
	//ClosePath:
	//	{ClosePath}
	//	'Z' | 'z';
	public ClosePathElements getClosePathAccess() {
		return pClosePath;
	}
	
	public ParserRule getClosePathRule() {
		return getClosePathAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
