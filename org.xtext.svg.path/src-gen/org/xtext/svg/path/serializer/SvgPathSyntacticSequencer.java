/*
 * generated by Xtext 2.12.0
 */
package org.xtext.svg.path.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.svg.path.services.SvgPathGrammarAccess;

@SuppressWarnings("all")
public class SvgPathSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SvgPathGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AbsoluteCubicCurveTo_CommaKeyword_10_q;
	protected AbstractElementAlias match_AbsoluteCubicCurveTo_CommaKeyword_2_q;
	protected AbstractElementAlias match_AbsoluteCubicCurveTo_CommaKeyword_4_q;
	protected AbstractElementAlias match_AbsoluteCubicCurveTo_CommaKeyword_6_q;
	protected AbstractElementAlias match_AbsoluteCubicCurveTo_CommaKeyword_8_q;
	protected AbstractElementAlias match_AbsoluteLineTo_CommaKeyword_2_q;
	protected AbstractElementAlias match_AbsoluteMoveTo_CommaKeyword_2_q;
	protected AbstractElementAlias match_AbsoluteQuadraticCurveTo_CommaKeyword_2_q;
	protected AbstractElementAlias match_AbsoluteQuadraticCurveTo_CommaKeyword_4_q;
	protected AbstractElementAlias match_AbsoluteQuadraticCurveTo_CommaKeyword_6_q;
	protected AbstractElementAlias match_AbsoluteSmoothCubicCurveTo_CommaKeyword_2_q;
	protected AbstractElementAlias match_AbsoluteSmoothCubicCurveTo_CommaKeyword_4_q;
	protected AbstractElementAlias match_AbsoluteSmoothCubicCurveTo_CommaKeyword_6_q;
	protected AbstractElementAlias match_AbsoluteSmoothQuadraticCurveTo_CommaKeyword_2_q;
	protected AbstractElementAlias match_RelativeCubicCurveTo_CommaKeyword_10_q;
	protected AbstractElementAlias match_RelativeCubicCurveTo_CommaKeyword_2_q;
	protected AbstractElementAlias match_RelativeCubicCurveTo_CommaKeyword_4_q;
	protected AbstractElementAlias match_RelativeCubicCurveTo_CommaKeyword_6_q;
	protected AbstractElementAlias match_RelativeCubicCurveTo_CommaKeyword_8_q;
	protected AbstractElementAlias match_RelativeLineTo_CommaKeyword_2_q;
	protected AbstractElementAlias match_RelativeMoveTo_CommaKeyword_2_q;
	protected AbstractElementAlias match_RelativeQuadraticCurveTo_CommaKeyword_2_q;
	protected AbstractElementAlias match_RelativeQuadraticCurveTo_CommaKeyword_4_q;
	protected AbstractElementAlias match_RelativeQuadraticCurveTo_CommaKeyword_6_q;
	protected AbstractElementAlias match_RelativeSmoothCubicCurveTo_CommaKeyword_2_q;
	protected AbstractElementAlias match_RelativeSmoothCubicCurveTo_CommaKeyword_4_q;
	protected AbstractElementAlias match_RelativeSmoothCubicCurveTo_CommaKeyword_6_q;
	protected AbstractElementAlias match_RelativeSmoothQuadraticCurveTo_CommaKeyword_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SvgPathGrammarAccess) access;
		match_AbsoluteCubicCurveTo_CommaKeyword_10_q = new TokenAlias(false, true, grammarAccess.getAbsoluteCubicCurveToAccess().getCommaKeyword_10());
		match_AbsoluteCubicCurveTo_CommaKeyword_2_q = new TokenAlias(false, true, grammarAccess.getAbsoluteCubicCurveToAccess().getCommaKeyword_2());
		match_AbsoluteCubicCurveTo_CommaKeyword_4_q = new TokenAlias(false, true, grammarAccess.getAbsoluteCubicCurveToAccess().getCommaKeyword_4());
		match_AbsoluteCubicCurveTo_CommaKeyword_6_q = new TokenAlias(false, true, grammarAccess.getAbsoluteCubicCurveToAccess().getCommaKeyword_6());
		match_AbsoluteCubicCurveTo_CommaKeyword_8_q = new TokenAlias(false, true, grammarAccess.getAbsoluteCubicCurveToAccess().getCommaKeyword_8());
		match_AbsoluteLineTo_CommaKeyword_2_q = new TokenAlias(false, true, grammarAccess.getAbsoluteLineToAccess().getCommaKeyword_2());
		match_AbsoluteMoveTo_CommaKeyword_2_q = new TokenAlias(false, true, grammarAccess.getAbsoluteMoveToAccess().getCommaKeyword_2());
		match_AbsoluteQuadraticCurveTo_CommaKeyword_2_q = new TokenAlias(false, true, grammarAccess.getAbsoluteQuadraticCurveToAccess().getCommaKeyword_2());
		match_AbsoluteQuadraticCurveTo_CommaKeyword_4_q = new TokenAlias(false, true, grammarAccess.getAbsoluteQuadraticCurveToAccess().getCommaKeyword_4());
		match_AbsoluteQuadraticCurveTo_CommaKeyword_6_q = new TokenAlias(false, true, grammarAccess.getAbsoluteQuadraticCurveToAccess().getCommaKeyword_6());
		match_AbsoluteSmoothCubicCurveTo_CommaKeyword_2_q = new TokenAlias(false, true, grammarAccess.getAbsoluteSmoothCubicCurveToAccess().getCommaKeyword_2());
		match_AbsoluteSmoothCubicCurveTo_CommaKeyword_4_q = new TokenAlias(false, true, grammarAccess.getAbsoluteSmoothCubicCurveToAccess().getCommaKeyword_4());
		match_AbsoluteSmoothCubicCurveTo_CommaKeyword_6_q = new TokenAlias(false, true, grammarAccess.getAbsoluteSmoothCubicCurveToAccess().getCommaKeyword_6());
		match_AbsoluteSmoothQuadraticCurveTo_CommaKeyword_2_q = new TokenAlias(false, true, grammarAccess.getAbsoluteSmoothQuadraticCurveToAccess().getCommaKeyword_2());
		match_RelativeCubicCurveTo_CommaKeyword_10_q = new TokenAlias(false, true, grammarAccess.getRelativeCubicCurveToAccess().getCommaKeyword_10());
		match_RelativeCubicCurveTo_CommaKeyword_2_q = new TokenAlias(false, true, grammarAccess.getRelativeCubicCurveToAccess().getCommaKeyword_2());
		match_RelativeCubicCurveTo_CommaKeyword_4_q = new TokenAlias(false, true, grammarAccess.getRelativeCubicCurveToAccess().getCommaKeyword_4());
		match_RelativeCubicCurveTo_CommaKeyword_6_q = new TokenAlias(false, true, grammarAccess.getRelativeCubicCurveToAccess().getCommaKeyword_6());
		match_RelativeCubicCurveTo_CommaKeyword_8_q = new TokenAlias(false, true, grammarAccess.getRelativeCubicCurveToAccess().getCommaKeyword_8());
		match_RelativeLineTo_CommaKeyword_2_q = new TokenAlias(false, true, grammarAccess.getRelativeLineToAccess().getCommaKeyword_2());
		match_RelativeMoveTo_CommaKeyword_2_q = new TokenAlias(false, true, grammarAccess.getRelativeMoveToAccess().getCommaKeyword_2());
		match_RelativeQuadraticCurveTo_CommaKeyword_2_q = new TokenAlias(false, true, grammarAccess.getRelativeQuadraticCurveToAccess().getCommaKeyword_2());
		match_RelativeQuadraticCurveTo_CommaKeyword_4_q = new TokenAlias(false, true, grammarAccess.getRelativeQuadraticCurveToAccess().getCommaKeyword_4());
		match_RelativeQuadraticCurveTo_CommaKeyword_6_q = new TokenAlias(false, true, grammarAccess.getRelativeQuadraticCurveToAccess().getCommaKeyword_6());
		match_RelativeSmoothCubicCurveTo_CommaKeyword_2_q = new TokenAlias(false, true, grammarAccess.getRelativeSmoothCubicCurveToAccess().getCommaKeyword_2());
		match_RelativeSmoothCubicCurveTo_CommaKeyword_4_q = new TokenAlias(false, true, grammarAccess.getRelativeSmoothCubicCurveToAccess().getCommaKeyword_4());
		match_RelativeSmoothCubicCurveTo_CommaKeyword_6_q = new TokenAlias(false, true, grammarAccess.getRelativeSmoothCubicCurveToAccess().getCommaKeyword_6());
		match_RelativeSmoothQuadraticCurveTo_CommaKeyword_2_q = new TokenAlias(false, true, grammarAccess.getRelativeSmoothQuadraticCurveToAccess().getCommaKeyword_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AbsoluteCubicCurveTo_CommaKeyword_10_q.equals(syntax))
				emit_AbsoluteCubicCurveTo_CommaKeyword_10_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AbsoluteCubicCurveTo_CommaKeyword_2_q.equals(syntax))
				emit_AbsoluteCubicCurveTo_CommaKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AbsoluteCubicCurveTo_CommaKeyword_4_q.equals(syntax))
				emit_AbsoluteCubicCurveTo_CommaKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AbsoluteCubicCurveTo_CommaKeyword_6_q.equals(syntax))
				emit_AbsoluteCubicCurveTo_CommaKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AbsoluteCubicCurveTo_CommaKeyword_8_q.equals(syntax))
				emit_AbsoluteCubicCurveTo_CommaKeyword_8_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AbsoluteLineTo_CommaKeyword_2_q.equals(syntax))
				emit_AbsoluteLineTo_CommaKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AbsoluteMoveTo_CommaKeyword_2_q.equals(syntax))
				emit_AbsoluteMoveTo_CommaKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AbsoluteQuadraticCurveTo_CommaKeyword_2_q.equals(syntax))
				emit_AbsoluteQuadraticCurveTo_CommaKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AbsoluteQuadraticCurveTo_CommaKeyword_4_q.equals(syntax))
				emit_AbsoluteQuadraticCurveTo_CommaKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AbsoluteQuadraticCurveTo_CommaKeyword_6_q.equals(syntax))
				emit_AbsoluteQuadraticCurveTo_CommaKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AbsoluteSmoothCubicCurveTo_CommaKeyword_2_q.equals(syntax))
				emit_AbsoluteSmoothCubicCurveTo_CommaKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AbsoluteSmoothCubicCurveTo_CommaKeyword_4_q.equals(syntax))
				emit_AbsoluteSmoothCubicCurveTo_CommaKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AbsoluteSmoothCubicCurveTo_CommaKeyword_6_q.equals(syntax))
				emit_AbsoluteSmoothCubicCurveTo_CommaKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AbsoluteSmoothQuadraticCurveTo_CommaKeyword_2_q.equals(syntax))
				emit_AbsoluteSmoothQuadraticCurveTo_CommaKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RelativeCubicCurveTo_CommaKeyword_10_q.equals(syntax))
				emit_RelativeCubicCurveTo_CommaKeyword_10_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RelativeCubicCurveTo_CommaKeyword_2_q.equals(syntax))
				emit_RelativeCubicCurveTo_CommaKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RelativeCubicCurveTo_CommaKeyword_4_q.equals(syntax))
				emit_RelativeCubicCurveTo_CommaKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RelativeCubicCurveTo_CommaKeyword_6_q.equals(syntax))
				emit_RelativeCubicCurveTo_CommaKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RelativeCubicCurveTo_CommaKeyword_8_q.equals(syntax))
				emit_RelativeCubicCurveTo_CommaKeyword_8_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RelativeLineTo_CommaKeyword_2_q.equals(syntax))
				emit_RelativeLineTo_CommaKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RelativeMoveTo_CommaKeyword_2_q.equals(syntax))
				emit_RelativeMoveTo_CommaKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RelativeQuadraticCurveTo_CommaKeyword_2_q.equals(syntax))
				emit_RelativeQuadraticCurveTo_CommaKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RelativeQuadraticCurveTo_CommaKeyword_4_q.equals(syntax))
				emit_RelativeQuadraticCurveTo_CommaKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RelativeQuadraticCurveTo_CommaKeyword_6_q.equals(syntax))
				emit_RelativeQuadraticCurveTo_CommaKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RelativeSmoothCubicCurveTo_CommaKeyword_2_q.equals(syntax))
				emit_RelativeSmoothCubicCurveTo_CommaKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RelativeSmoothCubicCurveTo_CommaKeyword_4_q.equals(syntax))
				emit_RelativeSmoothCubicCurveTo_CommaKeyword_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RelativeSmoothCubicCurveTo_CommaKeyword_6_q.equals(syntax))
				emit_RelativeSmoothCubicCurveTo_CommaKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RelativeSmoothQuadraticCurveTo_CommaKeyword_2_q.equals(syntax))
				emit_RelativeSmoothQuadraticCurveTo_CommaKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     x=Number (ambiguity) y=Number
	 */
	protected void emit_AbsoluteCubicCurveTo_CommaKeyword_10_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     c1x=Number (ambiguity) c1y=Number
	 */
	protected void emit_AbsoluteCubicCurveTo_CommaKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     c1y=Number (ambiguity) c2x=Number
	 */
	protected void emit_AbsoluteCubicCurveTo_CommaKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     c2x=Number (ambiguity) c2y=Number
	 */
	protected void emit_AbsoluteCubicCurveTo_CommaKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     c2y=Number (ambiguity) x=Number
	 */
	protected void emit_AbsoluteCubicCurveTo_CommaKeyword_8_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     x=Number (ambiguity) y=Number
	 */
	protected void emit_AbsoluteLineTo_CommaKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     x=Number (ambiguity) y=Number
	 */
	protected void emit_AbsoluteMoveTo_CommaKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     cx=Number (ambiguity) cy=Number
	 */
	protected void emit_AbsoluteQuadraticCurveTo_CommaKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     cy=Number (ambiguity) x=Number
	 */
	protected void emit_AbsoluteQuadraticCurveTo_CommaKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     x=Number (ambiguity) y=Number
	 */
	protected void emit_AbsoluteQuadraticCurveTo_CommaKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     cx=Number (ambiguity) cy=Number
	 */
	protected void emit_AbsoluteSmoothCubicCurveTo_CommaKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     cy=Number (ambiguity) x=Number
	 */
	protected void emit_AbsoluteSmoothCubicCurveTo_CommaKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     x=Number (ambiguity) y=Number
	 */
	protected void emit_AbsoluteSmoothCubicCurveTo_CommaKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     x=Number (ambiguity) y=Number
	 */
	protected void emit_AbsoluteSmoothQuadraticCurveTo_CommaKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     dx=Number (ambiguity) dy=Number
	 */
	protected void emit_RelativeCubicCurveTo_CommaKeyword_10_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     dc1x=Number (ambiguity) dc1y=Number
	 */
	protected void emit_RelativeCubicCurveTo_CommaKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     dc1y=Number (ambiguity) dc2x=Number
	 */
	protected void emit_RelativeCubicCurveTo_CommaKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     dc2x=Number (ambiguity) dc2y=Number
	 */
	protected void emit_RelativeCubicCurveTo_CommaKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     dc2y=Number (ambiguity) dx=Number
	 */
	protected void emit_RelativeCubicCurveTo_CommaKeyword_8_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     dx=Number (ambiguity) dy=Number
	 */
	protected void emit_RelativeLineTo_CommaKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     dx=Number (ambiguity) dy=Number
	 */
	protected void emit_RelativeMoveTo_CommaKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     dcx=Number (ambiguity) dcy=Number
	 */
	protected void emit_RelativeQuadraticCurveTo_CommaKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     dcy=Number (ambiguity) dx=Number
	 */
	protected void emit_RelativeQuadraticCurveTo_CommaKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     dx=Number (ambiguity) dy=Number
	 */
	protected void emit_RelativeQuadraticCurveTo_CommaKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     dcx=Number (ambiguity) dcy=Number
	 */
	protected void emit_RelativeSmoothCubicCurveTo_CommaKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     dcy=Number (ambiguity) dx=Number
	 */
	protected void emit_RelativeSmoothCubicCurveTo_CommaKeyword_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     dx=Number (ambiguity) dy=Number
	 */
	protected void emit_RelativeSmoothCubicCurveTo_CommaKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     dx=Number (ambiguity) dy=Number
	 */
	protected void emit_RelativeSmoothQuadraticCurveTo_CommaKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
