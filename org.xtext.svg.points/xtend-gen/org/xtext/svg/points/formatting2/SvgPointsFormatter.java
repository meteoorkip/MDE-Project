/**
 * generated by Xtext 2.12.0
 */
package org.xtext.svg.points.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.svg.points.services.SvgPointsGrammarAccess;
import svg.Coordinate;
import svg.Point;
import svg.Polygon;

@SuppressWarnings("all")
public class SvgPointsFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private SvgPointsGrammarAccess _svgPointsGrammarAccess;
  
  protected void _format(final Polygon polygon, @Extension final IFormattableDocument document) {
    EList<Point> _points = polygon.getPoints();
    for (final Point point : _points) {
      document.<Point>format(point);
    }
  }
  
  protected void _format(final Point point, @Extension final IFormattableDocument document) {
    document.<Coordinate>format(point.getX());
    document.<Coordinate>format(point.getY());
  }
  
  public void format(final Object polygon, final IFormattableDocument document) {
    if (polygon instanceof XtextResource) {
      _format((XtextResource)polygon, document);
      return;
    } else if (polygon instanceof Polygon) {
      _format((Polygon)polygon, document);
      return;
    } else if (polygon instanceof Point) {
      _format((Point)polygon, document);
      return;
    } else if (polygon instanceof EObject) {
      _format((EObject)polygon, document);
      return;
    } else if (polygon == null) {
      _format((Void)null, document);
      return;
    } else if (polygon != null) {
      _format(polygon, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(polygon, document).toString());
    }
  }
}
