/*
 * generated by Xtext 2.12.0
 */
package org.xtext.svg.points.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.svg.points.services.SvgPointsGrammarAccess;
import svg.Coordinate;
import svg.Point;
import svg.Polygon;
import svg.SvgPackage;

@SuppressWarnings("all")
public class SvgPointsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SvgPointsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SvgPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SvgPackage.COORDINATE:
				sequence_Coordinate(context, (Coordinate) semanticObject); 
				return; 
			case SvgPackage.POINT:
				sequence_Point(context, (Point) semanticObject); 
				return; 
			case SvgPackage.POLYGON:
				sequence_Polygon(context, (Polygon) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Coordinate returns Coordinate
	 *
	 * Constraint:
	 *     (number=Number unit=Unit?)
	 */
	protected void sequence_Coordinate(ISerializationContext context, Coordinate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Point returns Point
	 *
	 * Constraint:
	 *     (x=Coordinate y=Coordinate)
	 */
	protected void sequence_Point(ISerializationContext context, Point semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SvgPackage.Literals.POINT__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SvgPackage.Literals.POINT__X));
			if (transientValues.isValueTransient(semanticObject, SvgPackage.Literals.POINT__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SvgPackage.Literals.POINT__Y));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPointAccess().getXCoordinateParserRuleCall_0_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getPointAccess().getYCoordinateParserRuleCall_2_0(), semanticObject.getY());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Polygon returns Polygon
	 *
	 * Constraint:
	 *     (points+=Point points+=Point*)
	 */
	protected void sequence_Polygon(ISerializationContext context, Polygon semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
