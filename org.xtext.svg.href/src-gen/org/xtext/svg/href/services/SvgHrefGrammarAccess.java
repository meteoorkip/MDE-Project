/*
 * generated by Xtext 2.12.0
 */
package org.xtext.svg.href.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SvgHrefGrammarAccess extends AbstractGrammarElementFinder {
	
	public class HrefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.href.SvgHref.Href");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalIriParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBase64RefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Href:
		//	LocalIri | Base64Ref;
		@Override public ParserRule getRule() { return rule; }
		
		//LocalIri | Base64Ref
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LocalIri
		public RuleCall getLocalIriParserRuleCall_0() { return cLocalIriParserRuleCall_0; }
		
		//Base64Ref
		public RuleCall getBase64RefParserRuleCall_1() { return cBase64RefParserRuleCall_1; }
	}
	public class LocalIriElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.href.SvgHref.LocalIri");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUrlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNumberSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementNameIDTerminalRuleCall_3_0 = (RuleCall)cElementNameAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LocalIri:
		//	'url'
		//	'('
		//	'#' elementName=ID
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'url' '(' '#' elementName=ID ')'
		public Group getGroup() { return cGroup; }
		
		//'url'
		public Keyword getUrlKeyword_0() { return cUrlKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'#'
		public Keyword getNumberSignKeyword_2() { return cNumberSignKeyword_2; }
		
		//elementName=ID
		public Assignment getElementNameAssignment_3() { return cElementNameAssignment_3; }
		
		//ID
		public RuleCall getElementNameIDTerminalRuleCall_3_0() { return cElementNameIDTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class Base64RefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.href.SvgHref.Base64Ref");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBase64Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBase64BASE64_STRINGTerminalRuleCall_2_0 = (RuleCall)cBase64Assignment_2.eContents().get(0);
		
		//Base64Ref:
		//	'data' ':' base64=BASE64_STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'data' ':' base64=BASE64_STRING
		public Group getGroup() { return cGroup; }
		
		//'data'
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//base64=BASE64_STRING
		public Assignment getBase64Assignment_2() { return cBase64Assignment_2; }
		
		//BASE64_STRING
		public RuleCall getBase64BASE64_STRINGTerminalRuleCall_2_0() { return cBase64BASE64_STRINGTerminalRuleCall_2_0; }
	}
	
	
	private final HrefElements pHref;
	private final LocalIriElements pLocalIri;
	private final Base64RefElements pBase64Ref;
	private final TerminalRule tBASE64_STRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SvgHrefGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pHref = new HrefElements();
		this.pLocalIri = new LocalIriElements();
		this.pBase64Ref = new Base64RefElements();
		this.tBASE64_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.svg.href.SvgHref.BASE64_STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.svg.href.SvgHref".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Href:
	//	LocalIri | Base64Ref;
	public HrefElements getHrefAccess() {
		return pHref;
	}
	
	public ParserRule getHrefRule() {
		return getHrefAccess().getRule();
	}
	
	//LocalIri:
	//	'url'
	//	'('
	//	'#' elementName=ID
	//	')';
	public LocalIriElements getLocalIriAccess() {
		return pLocalIri;
	}
	
	public ParserRule getLocalIriRule() {
		return getLocalIriAccess().getRule();
	}
	
	//Base64Ref:
	//	'data' ':' base64=BASE64_STRING;
	public Base64RefElements getBase64RefAccess() {
		return pBase64Ref;
	}
	
	public ParserRule getBase64RefRule() {
		return getBase64RefAccess().getRule();
	}
	
	//terminal BASE64_STRING:
	//	ID '/' ID ';' ID ',' ('A'..'Z' | 'a'..'z' | '0'..'9' | '+' | '/' | '=')+;
	public TerminalRule getBASE64_STRINGRule() {
		return tBASE64_STRING;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
