/*
 * generated by Xtext 2.12.0
 */
package org.xtext.svg.lengths.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.svg.lengths.services.SvgLengthsGrammarAccess;
import svg.Length;
import svg.StrokeDashArray;
import svg.SvgPackage;

@SuppressWarnings("all")
public class SvgLengthsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SvgLengthsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SvgPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SvgPackage.LENGTH:
				sequence_Length(context, (Length) semanticObject); 
				return; 
			case SvgPackage.STROKE_DASH_ARRAY:
				sequence_StrokeDashArray(context, (StrokeDashArray) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Length returns Length
	 *
	 * Constraint:
	 *     (number=Number unit=Unit?)
	 */
	protected void sequence_Length(ISerializationContext context, Length semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StrokeDashArray returns StrokeDashArray
	 *
	 * Constraint:
	 *     (strokeDashArray+=Length strokeDashArray+=Length*)
	 */
	protected void sequence_StrokeDashArray(ISerializationContext context, StrokeDashArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
