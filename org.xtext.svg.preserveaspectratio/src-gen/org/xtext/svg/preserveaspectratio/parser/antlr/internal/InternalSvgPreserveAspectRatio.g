/*
 * generated by Xtext 2.12.0
 */
grammar InternalSvgPreserveAspectRatio;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.svg.preserveaspectratio.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.svg.preserveaspectratio.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.svg.preserveaspectratio.services.SvgPreserveAspectRatioGrammarAccess;

}

@parser::members {

 	private SvgPreserveAspectRatioGrammarAccess grammarAccess;

    public InternalSvgPreserveAspectRatioParser(TokenStream input, SvgPreserveAspectRatioGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "PreserveAspectRatio";
   	}

   	@Override
   	protected SvgPreserveAspectRatioGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePreserveAspectRatio
entryRulePreserveAspectRatio returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPreserveAspectRatioRule()); }
	iv_rulePreserveAspectRatio=rulePreserveAspectRatio
	{ $current=$iv_rulePreserveAspectRatio.current; }
	EOF;

// Rule PreserveAspectRatio
rulePreserveAspectRatio returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPreserveAspectRatioAccess().getAlignAlignEnumRuleCall_0_0());
				}
				lv_align_0_0=ruleAlign
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPreserveAspectRatioRule());
					}
					set(
						$current,
						"align",
						lv_align_0_0,
						"org.xtext.svg.preserveaspectratio.SvgPreserveAspectRatio.Align");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPreserveAspectRatioAccess().getMeetOrSliceMeetOrSliceEnumRuleCall_1_0());
				}
				lv_meetOrSlice_1_0=ruleMeetOrSlice
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPreserveAspectRatioRule());
					}
					set(
						$current,
						"meetOrSlice",
						lv_meetOrSlice_1_0,
						"org.xtext.svg.preserveaspectratio.SvgPreserveAspectRatio.MeetOrSlice");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Rule Align
ruleAlign returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='none'
			{
				$current = grammarAccess.getAlignAccess().getNoneEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAlignAccess().getNoneEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='xMinYMin'
			{
				$current = grammarAccess.getAlignAccess().getXMinYMinEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAlignAccess().getXMinYMinEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='xMidYMin'
			{
				$current = grammarAccess.getAlignAccess().getXMidYMinEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAlignAccess().getXMidYMinEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='xMaxYMin'
			{
				$current = grammarAccess.getAlignAccess().getXMaxYMinEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getAlignAccess().getXMaxYMinEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='xMinYMid'
			{
				$current = grammarAccess.getAlignAccess().getXMinYMidEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getAlignAccess().getXMinYMidEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='xMidYMid'
			{
				$current = grammarAccess.getAlignAccess().getXMidYMidEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getAlignAccess().getXMidYMidEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='xMaxYMid'
			{
				$current = grammarAccess.getAlignAccess().getXMaxYMidEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getAlignAccess().getXMaxYMidEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='xMinYMax'
			{
				$current = grammarAccess.getAlignAccess().getXMinYMaxEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getAlignAccess().getXMinYMaxEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='xMidYMax'
			{
				$current = grammarAccess.getAlignAccess().getXMidYMaxEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getAlignAccess().getXMidYMaxEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='xMaxYMax'
			{
				$current = grammarAccess.getAlignAccess().getXMaxYMaxEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getAlignAccess().getXMaxYMaxEnumLiteralDeclaration_9());
			}
		)
	)
;

// Rule MeetOrSlice
ruleMeetOrSlice returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='meet'
			{
				$current = grammarAccess.getMeetOrSliceAccess().getMeetEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMeetOrSliceAccess().getMeetEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='slice'
			{
				$current = grammarAccess.getMeetOrSliceAccess().getSliceEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMeetOrSliceAccess().getSliceEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
