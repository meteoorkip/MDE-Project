/*
 * generated by Xtext 2.12.0
 */
package org.xtext.svg.viewbox.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.svg.viewbox.services.SvgViewboxGrammarAccess;
import svg.Coordinate;
import svg.Length;
import svg.SvgPackage;
import svg.ViewBox;

@SuppressWarnings("all")
public class SvgViewboxSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SvgViewboxGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SvgPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SvgPackage.COORDINATE:
				sequence_Coordinate(context, (Coordinate) semanticObject); 
				return; 
			case SvgPackage.LENGTH:
				sequence_Length(context, (Length) semanticObject); 
				return; 
			case SvgPackage.VIEW_BOX:
				sequence_ViewBox(context, (ViewBox) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Coordinate returns Coordinate
	 *
	 * Constraint:
	 *     (number=Number unit=Unit?)
	 */
	protected void sequence_Coordinate(ISerializationContext context, Coordinate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Length returns Length
	 *
	 * Constraint:
	 *     (number=Number unit=Unit?)
	 */
	protected void sequence_Length(ISerializationContext context, Length semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ViewBox returns ViewBox
	 *
	 * Constraint:
	 *     (minX=Coordinate minY=Coordinate width=Length height=Length)
	 */
	protected void sequence_ViewBox(ISerializationContext context, ViewBox semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SvgPackage.Literals.VIEW_BOX__MIN_X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SvgPackage.Literals.VIEW_BOX__MIN_X));
			if (transientValues.isValueTransient(semanticObject, SvgPackage.Literals.VIEW_BOX__MIN_Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SvgPackage.Literals.VIEW_BOX__MIN_Y));
			if (transientValues.isValueTransient(semanticObject, SvgPackage.Literals.VIEW_BOX__WIDTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SvgPackage.Literals.VIEW_BOX__WIDTH));
			if (transientValues.isValueTransient(semanticObject, SvgPackage.Literals.VIEW_BOX__HEIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SvgPackage.Literals.VIEW_BOX__HEIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getViewBoxAccess().getMinXCoordinateParserRuleCall_0_0(), semanticObject.getMinX());
		feeder.accept(grammarAccess.getViewBoxAccess().getMinYCoordinateParserRuleCall_2_0(), semanticObject.getMinY());
		feeder.accept(grammarAccess.getViewBoxAccess().getWidthLengthParserRuleCall_4_0(), semanticObject.getWidth());
		feeder.accept(grammarAccess.getViewBoxAccess().getHeightLengthParserRuleCall_6_0(), semanticObject.getHeight());
		feeder.finish();
	}
	
	
}
