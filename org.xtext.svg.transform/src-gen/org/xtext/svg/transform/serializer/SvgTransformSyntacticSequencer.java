/*
 * generated by Xtext 2.12.0
 */
package org.xtext.svg.transform.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.svg.transform.services.SvgTransformGrammarAccess;

@SuppressWarnings("all")
public class SvgTransformSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SvgTransformGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Matrix_CommaKeyword_11_q;
	protected AbstractElementAlias match_Matrix_CommaKeyword_3_q;
	protected AbstractElementAlias match_Matrix_CommaKeyword_5_q;
	protected AbstractElementAlias match_Matrix_CommaKeyword_7_q;
	protected AbstractElementAlias match_Matrix_CommaKeyword_9_q;
	protected AbstractElementAlias match_Rotate_CommaKeyword_3_0_q;
	protected AbstractElementAlias match_Rotate_CommaKeyword_3_2_q;
	protected AbstractElementAlias match_Scale_CommaKeyword_3_0_q;
	protected AbstractElementAlias match_Transform_CommaKeyword_1_0_q;
	protected AbstractElementAlias match_Translate_CommaKeyword_3_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SvgTransformGrammarAccess) access;
		match_Matrix_CommaKeyword_11_q = new TokenAlias(false, true, grammarAccess.getMatrixAccess().getCommaKeyword_11());
		match_Matrix_CommaKeyword_3_q = new TokenAlias(false, true, grammarAccess.getMatrixAccess().getCommaKeyword_3());
		match_Matrix_CommaKeyword_5_q = new TokenAlias(false, true, grammarAccess.getMatrixAccess().getCommaKeyword_5());
		match_Matrix_CommaKeyword_7_q = new TokenAlias(false, true, grammarAccess.getMatrixAccess().getCommaKeyword_7());
		match_Matrix_CommaKeyword_9_q = new TokenAlias(false, true, grammarAccess.getMatrixAccess().getCommaKeyword_9());
		match_Rotate_CommaKeyword_3_0_q = new TokenAlias(false, true, grammarAccess.getRotateAccess().getCommaKeyword_3_0());
		match_Rotate_CommaKeyword_3_2_q = new TokenAlias(false, true, grammarAccess.getRotateAccess().getCommaKeyword_3_2());
		match_Scale_CommaKeyword_3_0_q = new TokenAlias(false, true, grammarAccess.getScaleAccess().getCommaKeyword_3_0());
		match_Transform_CommaKeyword_1_0_q = new TokenAlias(false, true, grammarAccess.getTransformAccess().getCommaKeyword_1_0());
		match_Translate_CommaKeyword_3_0_q = new TokenAlias(false, true, grammarAccess.getTranslateAccess().getCommaKeyword_3_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Matrix_CommaKeyword_11_q.equals(syntax))
				emit_Matrix_CommaKeyword_11_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Matrix_CommaKeyword_3_q.equals(syntax))
				emit_Matrix_CommaKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Matrix_CommaKeyword_5_q.equals(syntax))
				emit_Matrix_CommaKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Matrix_CommaKeyword_7_q.equals(syntax))
				emit_Matrix_CommaKeyword_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Matrix_CommaKeyword_9_q.equals(syntax))
				emit_Matrix_CommaKeyword_9_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Rotate_CommaKeyword_3_0_q.equals(syntax))
				emit_Rotate_CommaKeyword_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Rotate_CommaKeyword_3_2_q.equals(syntax))
				emit_Rotate_CommaKeyword_3_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Scale_CommaKeyword_3_0_q.equals(syntax))
				emit_Scale_CommaKeyword_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Transform_CommaKeyword_1_0_q.equals(syntax))
				emit_Transform_CommaKeyword_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Translate_CommaKeyword_3_0_q.equals(syntax))
				emit_Translate_CommaKeyword_3_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     e=Number (ambiguity) f=Number
	 */
	protected void emit_Matrix_CommaKeyword_11_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     a=Number (ambiguity) b=Number
	 */
	protected void emit_Matrix_CommaKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     b=Number (ambiguity) c=Number
	 */
	protected void emit_Matrix_CommaKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     c=Number (ambiguity) d=Number
	 */
	protected void emit_Matrix_CommaKeyword_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     d=Number (ambiguity) e=Number
	 */
	protected void emit_Matrix_CommaKeyword_9_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     a=Number (ambiguity) x=Number
	 */
	protected void emit_Rotate_CommaKeyword_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     x=Number (ambiguity) y=Number
	 */
	protected void emit_Rotate_CommaKeyword_3_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     x=Number (ambiguity) y=Number
	 */
	protected void emit_Scale_CommaKeyword_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     transform+=TransformValue (ambiguity) transform+=TransformValue
	 */
	protected void emit_Transform_CommaKeyword_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     x=Number (ambiguity) y=Number
	 */
	protected void emit_Translate_CommaKeyword_3_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
