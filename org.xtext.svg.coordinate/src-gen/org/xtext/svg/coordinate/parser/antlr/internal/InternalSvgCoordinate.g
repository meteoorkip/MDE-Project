/*
 * generated by Xtext 2.12.0
 */
grammar InternalSvgCoordinate;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.svg.coordinate.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.svg.coordinate.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.svg.coordinate.services.SvgCoordinateGrammarAccess;

}

@parser::members {

 	private SvgCoordinateGrammarAccess grammarAccess;

    public InternalSvgCoordinateParser(TokenStream input, SvgCoordinateGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Coordinate";
   	}

   	@Override
   	protected SvgCoordinateGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCoordinate
entryRuleCoordinate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCoordinateRule()); }
	iv_ruleCoordinate=ruleCoordinate
	{ $current=$iv_ruleCoordinate.current; }
	EOF;

// Rule Coordinate
ruleCoordinate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCoordinateAccess().getNumberNumberParserRuleCall_0_0());
				}
				lv_number_0_0=ruleNumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCoordinateRule());
					}
					set(
						$current,
						"number",
						lv_number_0_0,
						"org.xtext.svg.coordinate.SvgCoordinate.Number");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCoordinateAccess().getUnitUnitEnumRuleCall_1_0());
				}
				lv_unit_1_0=ruleUnit
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCoordinateRule());
					}
					set(
						$current,
						"unit",
						lv_unit_1_0,
						"org.xtext.svg.coordinate.SvgCoordinate.Unit");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_ruleNumber=ruleNumber
	{ $current=$iv_ruleNumber.current.getText(); }
	EOF;

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getNumberAccess().getIntegerParserRuleCall_0_0());
			}
			this_Integer_0=ruleInteger
			{
				$current.merge(this_Integer_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					kw='E'
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getNumberAccess().getEKeyword_0_1_0_0());
					}
					    |
					kw='e'
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getNumberAccess().getEKeyword_0_1_0_1());
					}
				)
				{
					newCompositeNode(grammarAccess.getNumberAccess().getIntegerParserRuleCall_0_1_1());
				}
				this_Integer_3=ruleInteger
				{
					$current.merge(this_Integer_3);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
		    |
		(
			(
				kw='+'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getNumberAccess().getPlusSignKeyword_1_0_0());
				}
				    |
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getNumberAccess().getHyphenMinusKeyword_1_0_1());
				}
			)?
			(
				this_INT_6=RULE_INT
				{
					$current.merge(this_INT_6);
				}
				{
					newLeafNode(this_INT_6, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1());
				}
			)?
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNumberAccess().getFullStopKeyword_1_2());
			}
			this_INT_8=RULE_INT
			{
				$current.merge(this_INT_8);
			}
			{
				newLeafNode(this_INT_8, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_3());
			}
			(
				(
					kw='E'
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getNumberAccess().getEKeyword_1_4_0_0());
					}
					    |
					kw='e'
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getNumberAccess().getEKeyword_1_4_0_1());
					}
				)
				{
					newCompositeNode(grammarAccess.getNumberAccess().getIntegerParserRuleCall_1_4_1());
				}
				this_Integer_11=ruleInteger
				{
					$current.merge(this_Integer_11);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
	)
;

// Entry rule entryRuleInteger
entryRuleInteger returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIntegerRule()); }
	iv_ruleInteger=ruleInteger
	{ $current=$iv_ruleInteger.current.getText(); }
	EOF;

// Rule Integer
ruleInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='+'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIntegerAccess().getPlusSignKeyword_0_0());
			}
			    |
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIntegerAccess().getHyphenMinusKeyword_0_1());
			}
		)?
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getIntegerAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Rule Unit
ruleUnit returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='px'
			{
				$current = grammarAccess.getUnitAccess().getPxEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getUnitAccess().getPxEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='em'
			{
				$current = grammarAccess.getUnitAccess().getEmEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getUnitAccess().getEmEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='ex'
			{
				$current = grammarAccess.getUnitAccess().getExEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getUnitAccess().getExEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='in'
			{
				$current = grammarAccess.getUnitAccess().getInEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getUnitAccess().getInEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='cm'
			{
				$current = grammarAccess.getUnitAccess().getCmEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getUnitAccess().getCmEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='mm'
			{
				$current = grammarAccess.getUnitAccess().getMmEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getUnitAccess().getMmEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='pt'
			{
				$current = grammarAccess.getUnitAccess().getPtEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getUnitAccess().getPtEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='pc'
			{
				$current = grammarAccess.getUnitAccess().getPcEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getUnitAccess().getPcEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='%'
			{
				$current = grammarAccess.getUnitAccess().getPercentageEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getUnitAccess().getPercentageEnumLiteralDeclaration_8());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
